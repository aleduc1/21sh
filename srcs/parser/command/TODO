===========================================================================================
1. [n]> file Redirect stdout(1) or [n] to file.
    
    if [>] : if [> - 1] != NUMBER, use default : [1], else use [n]
        if [> + 1] == (WORD || NUMBER) {check if file exist?} 
                -> YES : fetch fd ; trash ; std[n] = fd[file]
                -> NO  : create ; std[n] = fd[file]
        else ERROR

===========================================================================================

2. [n]>> file Append stdout(1) or [n] to file.
    
    if [>>] : if [>> - 1] != NUMBER, use default : [1], else use [n]
        if [>> + 1] == (WORD || NUMBER) {check if file exist?}
                -> YES : write new file ; copy old ; write old in new, std[n] = fd[file]
                -> NO  : create ; std[n] = fd[file]
        else ERROR

===========================================================================================

3. [n]< file Feed stdin(0) or [n] from file.
    
    if [<] : if [< - 1] != NUMBER, use default : [0], else use [n]
        if [< + 1] == (WORD || NUMBER) {check if file exist?}
                -> YES : stdin = fd[file]
                -> NO  : ERROR
        else ERROR

===========================================================================================

4. [x]&>[y][file] Redirect both stdout(1) and stderr(2) to [y][file] by default. (>& == &>)

    if [&>] : if [&> - 1] != NUMBER, use default : [1]&&[2], else use [x]
        if [&> + 1] == WORD {check if file exist?}
                -> YES : std[1,2] = fd[file]
                -> NO  : create ; std[1,2] = fd[y][file]
        else if [&> + 1] == NUMBER {check if fd exist?}
                -> YES : std[1,2] = fd[file]
                -> NO  : ERROR WRONG FD
        else ERROR

===========================================================================================

5. [x]<&[y] Copy [y] to [x], stdout(1) by default.

    if [<&] : if [<& - 1] != NUMBER, use default : [0], else use [x]
        if [<& + 1] == WORD {check if file exist?}
                -> YES : std[x][0] = fd[file]
                -> NO  : create ; std[x][0] = fd[file]
        else if [<& + 1] == NUMBER {check if fd exist?}
                -> YES : std[x][0] = fd[file]
                -> NO  : ERROR WRONG FD
        else ERROR

===========================================================================================

6. [n]>&- Close the [n] file descriptor.

    if [>&-] : if [>&- - 1] != NUMBER, use default : [1]&&[2], else use [n]
        close(fd[n][1&&2])

===========================================================================================

7. [n]<<[tag] Prompt until [tag] is inputed, use that string as stdin(0).
    
    if [<<] : if [< - 1] != NUMBER, use default : [0], else use [n]
        if [< + 1] == (WORD || NUMBER) {check if file exist?}
                -> YES : stdin = fd[file]
                -> NO  : ERROR
        else ERROR

===========================================================================================
